import java.util.*;
import java.awt.*;
import java.awt.event.*; 
import java.awt.font.*; 
import java.time.LocalTime;


public class Eforth202 {	// ooeforth
	static Scanner in;
	static Stack<Integer> stack=new Stack<>();
	static Stack<Integer> rstack=new Stack<>();
	static ArrayList<Code> dictionary=new ArrayList<>();
	static boolean compiling=false;
	static int base=10;
	static int fence=0;
	static int wp,ip;
	static Frame frame = new Frame("ooeForth");
	static TextArea input = new TextArea("words",10,50);
	static TextArea output = new TextArea("ooeForth 2.02\n",10,55);
	static void setup_dictionary() {
		final String prim[]= {
            ":","dup","over","4dup","swap","rot","-rot","2swap","pick","roll",
            "2dup","2over","drop","nip","2drop",">r","r>","r@","+","-",
            "*","/","mod","*/","*/mod","and","or","xor","negate","0=",
            "0<","0>","=","<",">","<>",">=","<=","base@","base!",
            "hex","decimal","cr",".",".r","u.r","key","emit","space","spaces",
            "]","[","'","exit","exec","create","variable","constant","@","!",
            "+!","?","array@","array!",",","allot","does","to","is","here",
            "words",".s","see","time","ms",
		};
		final String immd[]= {
            "aft","again","begin","\\",".(",".\"","else","for","if",
            "next","(","repeat",";","$\"","then","until","while",
		};
		for (String s: prim) { dictionary.add(new Code(s)); }
		for (String s: immd) { dictionary.add(new Code(s, true)); }
	}
	public static void main(String args[]) {	// ooeforth 2.01
		System.out.println("ooeForth2.02\n");
		setup_dictionary();
		// GetKeyChar
		Font font= new Font("Monospaced", Font.PLAIN, 12);
		input.setFont(font);
		output.setFont(font);
		frame.add(input, BorderLayout.EAST);
		frame.add(output, BorderLayout.WEST);
		frame.setSize(800, 700);
		frame.setVisible(true);
		frame.addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent we) {
                    System.exit(0);
                }});
		input.addKeyListener(new KeyAdapter() {
                public void keyTyped(KeyEvent ke) {
                    char keyChar = ke.getKeyChar();
                    if (keyChar <= 13) {
                        in = new Scanner(input.getText());
                        outerInterpreter();
                        for(int n:stack) System.out.print(Integer.toString(n,base)+" ");
                        System.out.print(">ok\n");
                        input.setText("");
                    }
                }});
	}
	// outer interpreter
    public static void outerInterpreter() {			// ooeforth 2.01
		String idiom;
		while(in.hasNext()) {  							// parse input
			idiom=in.next();
			Code newWordObject=null;
			for (var w : dictionary) {  				// search dictionary
				if (w.name.equals(idiom))
				{newWordObject=w;break;};}
			if(newWordObject !=null) {  				// word found
				if((!compiling) || newWordObject.immediate) {
					try {newWordObject.xt(); } 			// execute
					catch (Exception e) {output.append(e.toString());}}
				else {  								// or compile
					Code latestWord=dictionary.get(dictionary.size()-1);
					latestWord.addCode(newWordObject);}}
			else { 
				try {int n=Integer.parseInt(idiom, base); // not word, try number
					if (compiling) {  					// compile integer literal
						Code latestWord=dictionary.get(dictionary.size()-1);
						latestWord.addCode(new Code("dolit",n));}
					else { stack.push(n);}}				// or push number on stack
				catch (NumberFormatException  ex) {		// catch number errors
					output.append(idiom + "? ");
					compiling=false; stack.clear();}
			}
		}
		for(int n:stack) output.append(Integer.toString(n,base)+" ");
		output.append(">ok\n");
	}
	// forth words constructor
	static class Code {									// one size fits all objects
		public int token=0;
		public String name;
		public ArrayList<Code> pf=new ArrayList<>();
		public ArrayList<Code> pf1=new ArrayList<>();
		public ArrayList<Code> pf2=new ArrayList<>();
		public ArrayList<Integer> qf=new ArrayList<>() ;
		public int struct=0;
		public boolean immediate=false;
		public String literal;
		public Code(String n) {name=n;fence++;immediate=false;}
		public Code(String n, boolean f) {name=n;fence++;immediate=f;}
		public Code(String n, int d) {name=n;qf.add(d);}
		public Code(String n, String l) {name=n;literal=l;}
		public void xt() {
			if (lookUp.containsKey(name)) {
				lookUp.get(name).run();					// run primitives words
			} else { rstack.push(wp); rstack.push(ip);	// run colon words
                wp=token; ip=0;	// wp points to current colon object
                for(Code w:pf) {
                    try { w.xt();ip++;}						// inner interpreter
                    catch (ArithmeticException e) {}}
                ip=rstack.pop(); wp=rstack.pop();}
		}
		public void addCode(Code w) { this.pf.add(w);}
		public HashMap<String, Runnable> lookUp=new HashMap<>() {{
                // stacks
                put("dup",()->{stack.push(stack.peek());});
                put("over",()->{stack.push(stack.get(stack.size()-2));});
                put("2dup",()->{stack.addAll(stack.subList(stack.size()-2,stack.size()));});
                put("2over",()->{stack.addAll(stack.subList(stack.size()-4,stack.size()-2));});
                put("4dup",()->{stack.addAll(stack.subList(stack.size()-4,stack.size()));});
                put("swap",()->{stack.add(stack.size()-2,stack.pop());});
                put("rot",()->{stack.push(stack.remove(stack.size()-3));});
                put("-rot",()->{stack.push(stack.remove(stack.size()-3));stack.push(stack.remove(stack.size()-3));});
                put("2swap",()->{stack.push(stack.remove(stack.size()-4));stack.push(stack.remove(stack.size()-4));});
                put("pick",()->{int i=stack.pop();int n=stack.get(stack.size()-i-1);stack.push(n);});
                put("roll",()->{int i=stack.pop();int n=stack.remove(stack.size()-i-1);stack.push(n);});
                put("drop",()->{stack.pop();});
                put("nip",()->{stack.remove(stack.size()-2);});
                put("2drop",()->{stack.pop();stack.pop();});
                put(">r",()->{rstack.push(stack.pop());});
                put("r>",()->{stack.push(rstack.pop());});
                put("r@",()->{stack.push(rstack.peek());});
                put("push",()->{rstack.push(stack.pop());});
                put("pop",()->{stack.push(rstack.pop());});
                // math
                put("+",()->{stack.push(stack.pop()+stack.pop());});
                put("-",()->{int n=stack.pop();stack.push(stack.pop()-n);});
                put("*",()->{stack.push(stack.pop()*stack.pop());});
                put("/",()->{int n=stack.pop();stack.push(stack.pop()/n);});
                put("*/",()->{int n=stack.pop();stack.push(stack.pop()*stack.pop()/n);});
                put("*/mod",()->{int n=stack.pop();int m=stack.pop()*stack.pop();
                        stack.push(m%n);stack.push(m/n);});
                put("mod",()->{int n=stack.pop();stack.push(stack.pop()%n);});
                put("and",()->{stack.push(stack.pop()&stack.pop());});
                put("or",()->{stack.push(stack.pop()|stack.pop());});
                put("xor",()->{stack.push(stack.pop()^stack.pop());});
                put("negate",()->{stack.push(-stack.pop());});
                // logic
                put("0=",()->{stack.push((stack.pop()==0)?-1:0);});
                put("0<",()->{stack.push((stack.pop()<0)?-1:0);});
                put("0>",()->{stack.push((stack.pop()>0)?-1:0);});
                put("=",()->{int n=stack.pop();stack.push((stack.pop()==n)?-1:0);});
                put(">",()->{int n=stack.pop();stack.push((stack.pop()>n)?-1:0);});
                put("<",()->{int n=stack.pop();stack.push((stack.pop()<n)?-1:0);});
                put("<>",()->{int n=stack.pop();stack.push((stack.pop()!=n)?-1:0);});
                put(">=",()->{int n=stack.pop();stack.push((stack.pop()>=n)?-1:0);});
                put("<=",()->{int n=stack.pop();stack.push((stack.pop()<=n)?-1:0);});
                // output
                put("base@",()->{stack.push(base);});
                put("base!",()->{base=stack.pop();});
                put("hex",()->{base=16; });
                put("decimal",()->{base=10; });
                put("cr",()->{output.append("\n");});
                put(".",()->{output.append(Integer.toString(stack.pop(),base)+" ");});
                put(".r",()->{int n=stack.pop();String s=Integer.toString(stack.pop(),base);
                        for(int i=0;i+s.length()<n;i++)output.append(" ");
                        output.append(s+" ");});
                put("u.r",()->{int n=stack.pop();String s=Integer.toString(stack.pop()&0x7fffffff,base);
                        for(int i=0;i+s.length()<n;i++)output.append(" ");
                        output.append(s+" ");});
                put("key",()->{stack.push((int) in.next().charAt(0));});
                put("emit",()->{char b=(char)(int)stack.pop();output.append(""+b);});
//			put("emit",()->{output.append(""+Character.toChars( stack.pop()));});
                put("space",()->{output.append(" ");});
                put("spaces",()->{int n=stack.pop();for(int i=0;i<n;i++)output.append(" ");});
                // literals
                put("[",()->{compiling=false;});
                put("]",()->{compiling=true; });
                put("'",()->{String s=in.next(); boolean found=false;
                        for (var w:dictionary) {
                            if (s.equals(w.name)) { stack.push(w.token); found=true;break;}}
                        if (!found) stack.push(-1);});
                put("dolit",()->{	stack.push(qf.get(0));});			// integer literal
                put("dostr",()->{	stack.push(token);});			// string literals
                put("$\"",()->{ // -- w a
                        var d=in.delimiter();
                        in.useDelimiter("\"");			// need fix
                        String s=in.next();
                        Code last=dictionary.get(dictionary.size()-1);
                        last.addCode(new Code("dostr",s));			// literal=s
                        in.useDelimiter(d);in.next();
                        stack.push(last.token);stack.push(last.pf.size()-1);
                    });
                put("dotstr",()->{output.append(literal);});
                put(".\"",()->{
                        var d=in.delimiter();
                        in.useDelimiter("\"");			// need fix
                        String s=in.next();
                        Code last=dictionary.get(dictionary.size()-1);
                        last.addCode(new Code("dotstr",s));		// literal=s
                        in.useDelimiter(d);in.next();
                    });
                put("(",()->{
                        var d=in.delimiter();
                        in.useDelimiter("\\)");
                        String s=in.next();
                        in.useDelimiter(d);in.next();
                    });
                put(".(",()->{
                        var d=in.delimiter();
                        in.useDelimiter("\\)");output.append(in.next());
                        in.useDelimiter(d);in.next();
                    });
                put("\\",()->{
                        var d=in.delimiter();
                        in.useDelimiter("\n");in.next();
                        in.useDelimiter(d);in.next();
                    });
                // structure: if else then
                put("branch",()->{
                        if(!(stack.pop()==0)) {for(var w:pf) w.xt();}
                        else {for(var w:pf1) w.xt();}
                    });
                put("if",()->{
                        Code last=dictionary.get(dictionary.size()-1);
                        last.addCode(new Code("branch"));
                        dictionary.add(new Code("temp"));
                    });
                put("else",()->{
                        Code last=dictionary.get(dictionary.size()-2);
                        Code temp=dictionary.get(dictionary.size()-1);
                        last.pf.get(last.pf.size()-1).pf.addAll(temp.pf);
                        temp.pf.clear();
                        last.pf.get(last.pf.size()-1).struct=1;});
                put("then",()->{
                        Code last=dictionary.get(dictionary.size()-2);
                        Code temp=dictionary.get(dictionary.size()-1);
                        if (last.pf.get(last.pf.size()-1).struct==0) {
                            last.pf.get(last.pf.size()-1).pf.addAll(temp.pf);
                            dictionary.remove(dictionary.size()-1);
                        } else {
                            last.pf.get(last.pf.size()-1).pf1.addAll(temp.pf);
                            if (last.pf.get(last.pf.size()-1).struct==1) {
                                dictionary.remove(dictionary.size()-1);
                            }
                            else temp.pf.clear();
                        }});
                // loops
                put("loops",()->{
                        if (struct==1) {	// again
                            while(true) {for(var w:pf) w.xt();}}
                        if (struct==2) {	// while repeat
                            while (true) {
                                for(var w:pf) w.xt();
                                if (stack.pop()==0) break;
                                for(var w:pf1) w.xt();}
                        } else {
                            while(true) {	// until
                                for(var w:pf) w.xt();
                                if(stack.pop()!=0) break;}
                        }});
                put("begin",()->{
                        Code last=dictionary.get(dictionary.size()-1);
                        last.addCode(new Code("loops"));
                        dictionary.add(new Code("temp"));
                    });
                put("while",()->{
                        Code last=dictionary.get(dictionary.size()-2);
                        Code temp=dictionary.get(dictionary.size()-1);
                        last.pf.get(last.pf.size()-1).pf.addAll(temp.pf);
                        temp.pf.clear();
                        last.pf.get(last.pf.size()-1).struct=2;});
                put("repeat",()->{
                        Code last=dictionary.get(dictionary.size()-2);
                        Code temp=dictionary.get(dictionary.size()-1);
                        last.pf.get(last.pf.size()-1).pf1.addAll(temp.pf);
                        dictionary.remove(dictionary.size()-1);
                    });
                put("again",()->{
                        Code last=dictionary.get(dictionary.size()-2);
                        Code temp=dictionary.get(dictionary.size()-1);
                        last.pf.get(last.pf.size()-1).pf.addAll(temp.pf);
                        last.pf.get(last.pf.size()-1).struct=1;
                        dictionary.remove(dictionary.size()-1);
                    });
                put("until",()->{
                        Code last=dictionary.get(dictionary.size()-2);
                        Code temp=dictionary.get(dictionary.size()-1);
                        last.pf.get(last.pf.size()-1).pf.addAll(temp.pf);
                        dictionary.remove(dictionary.size()-1);
                    });
                // for next
                put("cycles",()->{int i=0;
                        if (struct==0) {
                            while(true){
                                for(var w:pf) w.xt();
                                i=rstack.pop();i--;
                                if (i<0) break;
                                rstack.push(i);
                            }
                        } else {
                            if (struct>0) {
                                for(var w:pf) w.xt();
                                while(true){
                                    for(var w:pf2) w.xt();
                                    i=rstack.pop();i--;
                                    if (i<0) break;
                                    rstack.push(i);
                                    for(var w:pf1) w.xt();
                                }
                            }}
                    });
                put("for",()->{
                        Code last=dictionary.get(dictionary.size()-1);
                        last.addCode(new Code(">r"));
                        last.addCode(new Code("cycles"));
                        dictionary.add(new Code("temp"));
                    });
                put("aft",()->{
                        Code last=dictionary.get(dictionary.size()-2);
                        Code temp=dictionary.get(dictionary.size()-1);
                        last.pf.get(last.pf.size()-1).pf.addAll(temp.pf);
                        temp.pf.clear();
                        last.pf.get(last.pf.size()-1).struct=3;});
                put("next",()->{
                        Code last=dictionary.get(dictionary.size()-2);
                        Code temp=dictionary.get(dictionary.size()-1);
                        if (last.pf.get(last.pf.size()-1).struct==0) 
                            last.pf.get(last.pf.size()-1).pf.addAll(temp.pf);
                        else last.pf.get(last.pf.size()-1).pf2.addAll(temp.pf);
                        dictionary.remove(dictionary.size()-1);
                    });
                // defining words
                put("exit",()->{throw new ArithmeticException(); });								// marker to exit interpreter
                put("exec",()->{int n=stack.pop();dictionary.get(n).xt();});
                put(":",()->{         								// -- box
                        String s=in.next();
                        dictionary.add(new Code(s));
                        Code last=dictionary.get(dictionary.size()-1);
                        last.token=fence++;
                        compiling=true;
                    });
                put(";",()->{         								
                        Code last=dictionary.get(dictionary.size()-1);
                        compiling=false;
                    });
                put("docon",()->{stack.push(qf.get(0));});			// integer literal
                put("dovar",()->{stack.push(token);});			// string literals
                put("create",()->{
                        String s=in.next();
                        dictionary.add(new Code(s));
                        Code last=dictionary.get(dictionary.size()-1);
                        last.token=fence++;
                        last.addCode(new Code("dovar",0));
                        last.pf.get(0).token=last.token;
                        last.pf.get(0).qf.remove(0);
                    });
                put("variable",()->{ 
                        String s=in.next();
                        dictionary.add(new Code(s));
                        Code last=dictionary.get(dictionary.size()-1);
                        last.token=fence++;
                        last.addCode(new Code("dovar",0));
                        last.pf.get(0).token=last.token;
                    });
                put("constant",()->{  // n --
                        String s=in.next();
                        dictionary.add(new Code(s));
                        Code last=dictionary.get(dictionary.size()-1);
                        last.token=fence++;
                        last.addCode(new Code("docon",stack.pop()));
                        last.pf.get(0).token=last.token;
                    });
                put("@",()->{  // w -- n
                        Code last=dictionary.get(stack.pop());
                        stack.push(last.pf.get(0).qf.get(0));
                    });
                put("!",()->{  // n w -- 
                        Code last=dictionary.get(stack.pop());
                        last.pf.get(0).qf.set(0,stack.pop());
                    });
                put("+!",()->{  // n w -- 
                        Code last=dictionary.get(stack.pop());
                        int n=last.pf.get(0).qf.get(0); n+=stack.pop();
                        last.pf.get(0).qf.set(0,n);
                    });
                put("?",()->{  // w -- 
                        Code last=dictionary.get(stack.pop());
                        output.append(Integer.toString(last.pf.get(0).qf.get(0)));
                    });
                put("array@",()->{  // w a -- n
                        int a=stack.pop();
                        Code last=dictionary.get(stack.pop());
                        stack.push(last.pf.get(0).qf.get(a));
                    });
                put("array!",()->{  // n w a -- 
                        int a=stack.pop();
                        Code last=dictionary.get(stack.pop());
                        last.pf.get(0).qf.set(a,stack.pop());
                    });
                put(",",()->{ // n --
                        Code last=dictionary.get(dictionary.size()-1);
                        last.pf.get(0).qf.add(stack.pop());
                    });
                put("allot",()->{  // n --
                        int n=stack.pop(); 
                        Code last=dictionary.get(dictionary.size()-1);
                        for(int i=0;i<n;i++) last.pf.get(0).qf.add(0);
                    });
                put("does",()->{ // n --
                        Code last=dictionary.get(dictionary.size()-1);
                        Code source=dictionary.get(wp);
                        last.pf.addAll(source.pf.subList(ip+2,source.pf.size()));
                    });
                put("to",()->{  									// n -- , compile only 
                        Code last=dictionary.get(wp);	ip++;		// current colon word
                        last.pf.get(ip++).pf.get(0).qf.set(0,stack.pop());	// next constant
                    });
                put("is",()->{  									// w -- , execute only
                        Code source=dictionary.get(stack.pop());	// source word
                        String s=in.next(); boolean found=false;
                        for (var w:dictionary) {
                            if (s.equals(w.name)) { 				// target word
                                Code target=dictionary.get(w.token); 
                                target.pf=source.pf; 				// copy pf 
                                found=true;break;}}
                        if (!found) output.append(s+" ?");
                    });
                // tools
                put("here",()->{stack.push(fence);});
                put("words",()->{int i=0;for (var word:dictionary) {
                            output.append(word.name + word.token+" ");i++;
                            if (i>10) {output.append("\n");i=0;}}});
                put(".s",()->{for(int n:stack) output.append(Integer.toString(n,base)+" ");});
                put("see",()->{String s=in.next(); boolean found=false;
                        for (var word:dictionary) {
                            if (s.equals(word.name)) { 
                                output.append(word.name+", "+word.token+", "+word.qf.toString());
                                for( var w:word.pf) output.append(w.name+", "+w.token+", "+w.qf.toString()+"| ");       
                                found=true; break;}
                        }
                        if (!found) output.append(s+" ?");
                    });
                put("time",()->{
                        LocalTime now=LocalTime.now();
                        output.append(now.toString());});
                put("ms",()->{ // n --
                        try { Thread.sleep(stack.pop());} 
                        catch (Exception e) { output.append(e.toString());}
                    });
			}};
    }
}

